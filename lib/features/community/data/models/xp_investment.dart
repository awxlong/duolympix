// lib/features/community/data/models/xp_investment.dart
/// 
/// Duolympix has a feature inspired by ‘达目标’ (yoobingo @ http://www.yoobingo.com/) where
/// users can use money (in our case XPs) to support each other in completing quests.
/// 
/// Implemention-wise, this file is an entity representing an XP investment in a quest
/// 
/// Instead of money, we use XP (Experience Points) earned from quests. The class provides 
/// methods for tracking collaborative contributions
/// and calculating total invested XP for quests.
library;
import 'package:floor/floor.dart';
import 'package:solo_leveling/global_data/converters/date_time_converter.dart';

/// Database entity for XP investments
/// 
/// Maps to the 'xp_investments' table in the SQLite database.
/// Stores information about who invested XP into which quest,
/// how much XP was invested, and when the investment occurred.
@Entity(tableName: 'xp_investments')
class XpInvestment {
  /// Auto-generated primary key for the investment record
  /// 
  /// Nullable because it is auto-generated by the database on insertion.
  @PrimaryKey(autoGenerate: true)
  final int? id;
  
  /// ID of the quest this investment is associated with
  /// 
  /// Foreign key linking to the target quest. Used to group investments
  /// by quest and calculate total XP invested in a quest.
  @ColumnInfo(name: 'questId')
  final String questId;
  
  /// ID of the user who made the investment
  /// 
  /// Identifies the investor. Used to track contributions from different users
  /// and potentially reward investors with special privileges or recognition.
  @ColumnInfo(name: 'investorId')
  final String investorId;
  
  /// Amount of XP invested
  /// 
  /// Positive integer representing the quantity of XP contributed to the quest.
  /// This value is summed with other investments to determine total quest value.
  @ColumnInfo(name: 'xpAmount')
  final int xpAmount;
  
  /// Timestamp of when the investment was made
  /// 
  /// Stored as a DateTime object (converted to/from milliseconds since epoch
  /// by [DateTimeConverter]). Used to sort investments chronologically and
  /// calculate time-based statistics.
  @ColumnInfo(name: 'timestamp')
  @TypeConverters([DateTimeConverter])
  final DateTime timestamp;
  
  /// Constructor for creating an XP investment
  /// 
  /// [id] is auto-generated by the database and should usually be omitted
  /// when creating new investments. Other parameters are required to define
  /// the investment details.
  XpInvestment({
    this.id,
    required this.questId,
    required this.investorId,
    required this.xpAmount,
    required this.timestamp,
  });
}

