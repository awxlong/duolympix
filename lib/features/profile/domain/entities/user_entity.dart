// lib/features/profile/domain/entities/user_entity.dart (Domain Entity)
/// User Entity - Domain Model for User Data
/// 
/// Represents the core user data structure used in the domain layer.
/// This class is independent of any persistence or presentation concerns,
/// following clean architecture principles. It includes user profile information,
/// progress tracking metrics, and business logic related to user actions.
library;
import 'package:equatable/equatable.dart';
import 'package:floor/floor.dart';
import 'package:solo_leveling/features/profile/data/mappers/user_mapper.dart';
import 'package:solo_leveling/features/shopping/data/models/product_model.dart';
import 'package:solo_leveling/global_data/converters/date_time_converter.dart';

class UserEntity extends Equatable {
  /// Unique identifier for the user (auto-generated by database)
  final int? id;
  
  /// User's chosen username (unique)
  final String username;
  
  /// User's email address (optional)
  final String? email;
  
  /// User's age (optional)
  final int? age;
  
  /// User's gender (optional)
  final String? gender;
  
  /// User's weight in kilograms (optional)
  final double? weight;
  
  /// User's height in centimeters (optional)
  final double? height;
  
  /// URL or path to user's profile picture (optional)
  final String? profilePicture;
  
  /// Total accumulated XP points from completed quests
  final int totalXp;
  
  /// User's current level, derived from total XP
  final int level;
  
  /// Current daily streak of completed quests
  final int streak;
  
  /// Total number of quests completed by the user
  final int totalQuestsCompleted;
  
  /// Timestamp of the user's last activity
  /// Stored as milliseconds since epoch using [DateTimeConverter]
  @ColumnInfo(name: 'INTEGER') 
  @TypeConverters([DateTimeConverter])
  final DateTime lastActive;
  
  /// User's password (should be hashed in storage)
  final String password;

  /// Creates a new UserEntity instance
  /// 
  /// All fields are required except those with default values.
  /// [totalXp], [level], [streak], and [totalQuestsCompleted] default to initial values.
  const UserEntity({
    this.id,
    required this.username,
    required this.email,
    required this.age,
    this.gender,
    this.weight,
    this.height,
    this.profilePicture,
    this.totalXp = 0,
    this.level = 1,
    this.streak = 0,
    this.totalQuestsCompleted = 0,
    required this.lastActive,
    required this.password,
  });

  /// Handles product purchase business logic
  /// 
  /// Updates user state after purchasing a product.
  /// Converts to/from data model using [UserMapper] to interact with persistence layer.
  /// 
  /// Returns:
  /// - Updated UserEntity with modified state (e.g., XP, level)
  /// 
  /// Future extensions:
  /// - Add inventory management
  /// - Implement currency/resource tracking
  /// - Add purchase history tracking
  UserEntity purchaseProduct(Product product) {
    final user = UserMapper.mapEntityToUser(this);
    final updatedUser = user.purchaseProduct(product);
    return UserMapper.mapUserToEntity(updatedUser);
  }

  /// Creates a copy of this UserEntity with optional field updates
  /// 
  /// Used to create immutable updates to the user state.
  /// All parameters are optional; only provided values will be updated.
  UserEntity copyWith({
    int? id,
    String? username,
    String? email,
    int? age,
    String? gender,
    double? weight,
    double? height,
    String? profilePicture,
    int? totalXp,
    int? level,
    int? streak,
    int? totalQuestsCompleted,
    DateTime? lastActive,
    String? password,
  }) {
    return UserEntity(
      id: id ?? this.id,
      username: username ?? this.username,
      email: email ?? this.email,
      age: age ?? this.age,
      gender: gender ?? this.gender,
      weight: weight ?? this.weight,
      height: height ?? this.height,
      profilePicture: profilePicture ?? this.profilePicture,
      totalXp: totalXp ?? this.totalXp,
      level: level ?? this.level,
      streak: streak ?? this.streak,
      totalQuestsCompleted: totalQuestsCompleted ?? this.totalQuestsCompleted,
      lastActive: lastActive ?? this.lastActive,
      password: password ?? this.password,
    );
  }

  /// Equality override for comparing UserEntity instances
  /// 
  /// Used by Equatable to determine object equality based on property values.
  @override
  List<Object?> get props => [
        id,
        username,
        email,
        age,
        gender,
        weight,
        height,
        profilePicture,
        totalXp,
        level,
        streak,
        totalQuestsCompleted,
        lastActive,
        password,
      ];
}



