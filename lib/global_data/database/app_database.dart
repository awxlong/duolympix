/// lib/global_data/database/app_database.dart
/// Database configuration using Floor Object Relation Mapping
/// 
/// This file defines the core database structure for the application using Floor,
/// a SQLite abstraction library for Flutter. It declares the database schema,
/// registered entities, and data access objects (DAOs) while handling database
/// initialization and versioning.
/// 
library;
import 'dart:async';
import 'package:floor/floor.dart';
import 'package:solo_leveling/features/community/data/models/colleague_relation.dart';
import 'package:solo_leveling/features/community/data/models/comment.dart';
import 'package:solo_leveling/features/community/data/models/xp_investment.dart';
import 'package:solo_leveling/global_data/converters/date_time_converter.dart';
import 'package:solo_leveling/global_data/database/colleague_relation_dao.dart';
import 'package:solo_leveling/global_data/database/comment_dao.dart';
import 'package:solo_leveling/global_data/database/xp_investment_dao.dart';
import 'package:solo_leveling/global_data/models/enums.dart';
import 'package:sqflite/sqflite.dart' as sqflite;
import '../models/user.dart';
import '../models/quest_history.dart';
import '../models/leaderboard_entry.dart';
import 'user_dao.dart';
import 'quest_history_dao.dart';
import 'leaderboard_dao.dart';

// Generated database code (auto-generated by Floor when running `dart pub run build_runner build`)
part 'app_database.g.dart';

/// Main application database class using Floor ORM
/// 
/// This abstract class defines the database schema, including:
/// - Database version (for migration purposes)
/// - Registered entities (tables)
/// - Type converters (for handling non-primitive data types)
/// - Data Access Objects (DAOs) for database operations
@TypeConverters([DateTimeConverter])
@Database(
  version: 1, 
  entities: [
    User, 
    QuestHistory, 
    Comment, 
    LeaderboardEntry, 
    ColleagueRelation, 
    XpInvestment
  ],
)
abstract class AppDatabase extends FloorDatabase {
  /// Data Access Object for User operations
  UserDao get userDao;
  
  /// Data Access Object for Quest completion history
  QuestHistoryDao get questHistoryDao;
  
  /// Data Access Object for Leaderboard entries
  LeaderboardDao get leaderboardDao;
  
  /// Data Access Object for Comments
  CommentDao get commentDao;
  
  /// Data Access Object for Colleague relationships
  ColleagueRelationDao get colleagueRelationDao;
  
  /// Data Access Object for XP investment records
  XpInvestmentDao get xpInvestmentDao;
}

/// Initializes and returns the application database
/// 
/// Creates a database instance using the generated Floor database builder.
/// The database is stored locally with the filename 'duolympix.db'.
/// Should be called once during app initialization (typically in main()).
/// 
/// Returns: A Future resolving to an [AppDatabase] instance
Future<AppDatabase> getDatabase() async {
  final database = await $FloorAppDatabase.databaseBuilder(
    'duolympix.db', // Name of the SQLite database file
  ).build();
  return database;
}
